/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/kube-batch/pkg/apis/scheduling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MPILister helps list MPIs.
type MPILister interface {
	// List lists all MPIs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MPI, err error)
	// MPIs returns an object that can list and get MPIs.
	MPIs(namespace string) MPINamespaceLister
	MPIListerExpansion
}

// mPILister implements the MPILister interface.
type mPILister struct {
	indexer cache.Indexer
}

// NewMPILister returns a new MPILister.
func NewMPILister(indexer cache.Indexer) MPILister {
	return &mPILister{indexer: indexer}
}

// List lists all MPIs in the indexer.
func (s *mPILister) List(selector labels.Selector) (ret []*v1alpha1.MPI, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MPI))
	})
	return ret, err
}

// MPIs returns an object that can list and get MPIs.
func (s *mPILister) MPIs(namespace string) MPINamespaceLister {
	return mPINamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MPINamespaceLister helps list and get MPIs.
type MPINamespaceLister interface {
	// List lists all MPIs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MPI, err error)
	// Get retrieves the MPI from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MPI, error)
	MPINamespaceListerExpansion
}

// mPINamespaceLister implements the MPINamespaceLister
// interface.
type mPINamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MPIs in the indexer for a given namespace.
func (s mPINamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MPI, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MPI))
	})
	return ret, err
}

// Get retrieves the MPI from the indexer for a given namespace and name.
func (s mPINamespaceLister) Get(name string) (*v1alpha1.MPI, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mpi"), name)
	}
	return obj.(*v1alpha1.MPI), nil
}
